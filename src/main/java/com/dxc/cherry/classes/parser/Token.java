package com.dxc.cherry.classes.parser;

/**
 * The "Token" class represents a single token generated by the Lexer. Each token consists of a boolean specifier if it is an operator,
 * precedence value and a lexeme(the value of the token).
 * The boolean specifier indicates whether the token is an operator or not,
 * the precedence value depends on the type of operator (0 if it is not)
 * and the lexeme is the actual text representation of the token in the input expression.
 */
public class Token {
    
	
    private final boolean isOperator;
    private final int precedence;
    private final String lexeme;

    public Token(String lexeme) {
        this.isOperator = false;
        this.precedence = 0;
        this.lexeme = lexeme;
    }
    
    public Token(String lexeme, int precendence) {
    	this.isOperator = true;
    	this.precedence = precendence;
    	this.lexeme = lexeme;
    }
    
    public String getLexeme() {
        return lexeme;
    }

    @Override
    public String toString() {
        return "Token{lexeme='" + lexeme + '\'' +
                '}';
    }

    /**
     * A method that checks if the token is an operator
     * @return Returns true or false.
     */
    public boolean isOperator() {
        return this.isOperator;
    }

    /** 
     * A method that checks if the token has higher precedence than another token
     * @param other Represents the other token.
     * @return Returns true if the current token has a higher precedence, otherwise returns false.
     */
    public boolean hasHigherPrecedence(Token other) {
       return this.precedence>other.precedence;
    }
}

